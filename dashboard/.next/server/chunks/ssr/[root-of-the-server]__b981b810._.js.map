{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/yizun/Documents/own-project/bcd-assignment/dashboard/components/shared/ThemeProvider.tsx"],"sourcesContent":["'use client';\r\n\r\nimport { createContext, useContext, useEffect, useState } from 'react';\r\n\r\ntype Theme = 'dark' | 'light' | 'system';\r\n\r\ntype ThemeProviderProps = {\r\n  children: React.ReactNode;\r\n  defaultTheme?: Theme;\r\n  storageKey?: string;\r\n};\r\n\r\ntype ThemeProviderState = {\r\n  theme: Theme;\r\n  setTheme: (theme: Theme) => void;\r\n};\r\n\r\nconst initialState: ThemeProviderState = {\r\n  theme: 'system',\r\n  setTheme: () => null,\r\n};\r\n\r\nconst ThemeProviderContext = createContext<ThemeProviderState>(initialState);\r\n\r\nexport function ThemeProvider({\r\n  children,\r\n  defaultTheme = 'system',\r\n  storageKey = 'blocksecure-ui-theme',\r\n  ...props\r\n}: ThemeProviderProps) {\r\n  const [theme, setTheme] = useState<Theme>(defaultTheme);\r\n  const [mounted, setMounted] = useState(false);\r\n\r\n  // Set mounted to true after component mounts (client-side only)\r\n  useEffect(() => {\r\n    setMounted(true);\r\n    // Read theme from localStorage after mounting\r\n    const storedTheme = localStorage?.getItem(storageKey) as Theme;\r\n    if (storedTheme) {\r\n      setTheme(storedTheme);\r\n    }\r\n  }, [storageKey]);\r\n\r\n  useEffect(() => {\r\n    if (!mounted) return;\r\n\r\n    const root = window.document.documentElement;\r\n\r\n    root.classList.remove('light', 'dark');\r\n\r\n    if (theme === 'system') {\r\n      const systemTheme = window.matchMedia('(prefers-color-scheme: dark)')\r\n        .matches\r\n        ? 'dark'\r\n        : 'light';\r\n\r\n      root.classList.add(systemTheme);\r\n      return;\r\n    }\r\n\r\n    root.classList.add(theme);\r\n  }, [theme, mounted]);\r\n\r\n  const value = {\r\n    theme,\r\n    setTheme: (theme: Theme) => {\r\n      if (typeof window !== 'undefined') {\r\n        localStorage?.setItem(storageKey, theme);\r\n      }\r\n      setTheme(theme);\r\n    },\r\n  };\r\n\r\n  return (\r\n    <ThemeProviderContext.Provider {...props} value={value}>\r\n      {children}\r\n    </ThemeProviderContext.Provider>\r\n  );\r\n}\r\n\r\nexport const useTheme = () => {\r\n  const context = useContext(ThemeProviderContext);\r\n\r\n  if (context === undefined)\r\n    throw new Error('useTheme must be used within a ThemeProvider');\r\n\r\n  return context;\r\n};"],"names":[],"mappings":";;;;;AAEA;AAFA;;;AAiBA,MAAM,eAAmC;IACvC,OAAO;IACP,UAAU,IAAM;AAClB;AAEA,MAAM,qCAAuB,CAAA,GAAA,qMAAA,CAAA,gBAAa,AAAD,EAAsB;AAExD,SAAS,cAAc,EAC5B,QAAQ,EACR,eAAe,QAAQ,EACvB,aAAa,sBAAsB,EACnC,GAAG,OACgB;IACnB,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAS;IAC1C,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAEvC,gEAAgE;IAChE,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,WAAW;QACX,8CAA8C;QAC9C,MAAM,cAAc,cAAc,QAAQ;QAC1C,IAAI,aAAa;YACf,SAAS;QACX;IACF,GAAG;QAAC;KAAW;IAEf,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,IAAI,CAAC,SAAS;QAEd,MAAM,OAAO,OAAO,QAAQ,CAAC,eAAe;QAE5C,KAAK,SAAS,CAAC,MAAM,CAAC,SAAS;QAE/B,IAAI,UAAU,UAAU;YACtB,MAAM,cAAc,OAAO,UAAU,CAAC,gCACnC,OAAO,GACN,SACA;YAEJ,KAAK,SAAS,CAAC,GAAG,CAAC;YACnB;QACF;QAEA,KAAK,SAAS,CAAC,GAAG,CAAC;IACrB,GAAG;QAAC;QAAO;KAAQ;IAEnB,MAAM,QAAQ;QACZ;QACA,UAAU,CAAC;YACT,uCAAmC;;YAEnC;YACA,SAAS;QACX;IACF;IAEA,qBACE,8OAAC,qBAAqB,QAAQ;QAAE,GAAG,KAAK;QAAE,OAAO;kBAC9C;;;;;;AAGP;AAEO,MAAM,WAAW;IACtB,MAAM,UAAU,CAAA,GAAA,qMAAA,CAAA,aAAU,AAAD,EAAE;IAE3B,IAAI,YAAY,WACd,MAAM,IAAI,MAAM;IAElB,OAAO;AACT","debugId":null}}]
}